import pandas as pd
import numpy as np
import geopandas as gpd
import folium
from folium import CircleMarker
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import streamlit as st
from streamlit_folium import folium_static
from pathlib import Path
import xarray as xr

class VulnerabilityAnalyzer:
    def __init__(self):
        self.pune_demo = None
        self.nashik_demo = None
        self.pune_hvi = None
        self.nashik_hvi = None
        self.pune_lst = None
        self.nashik_lst = None
        self.load_data()
    
    def load_data(self):
        """Load all demographic, HVI, and LST data from separate files"""
        try:
            # Define file paths
            base_path = Path("F:/Urban/UHI_MIGITAGION_PLANNER-/data/external")
            
            # Load demographic data with explicit data types
            self.pune_demo = pd.read_csv(base_path / "pune.csv")
            self.nashik_demo = pd.read_csv(base_path / "nashik.csv")
            
            # Convert numeric columns to proper data types
            for df in [self.pune_demo, self.nashik_demo]:
                # Convert population columns to numeric
                numeric_cols = ['population', 'population_over_65', 'low_income_households']
                for col in numeric_cols:
                    if col in df.columns:
                        df[col] = pd.to_numeric(df[col], errors='coerce')
                
                # Convert AC prevalence to float
                if 'ac_prevalence' in df.columns:
                    df['ac_prevalence'] = pd.to_numeric(df['ac_prevalence'], errors='coerce')
            
            # Load HVI data with explicit data types
            self.pune_hvi = pd.read_csv(base_path / "pune_hvi.csv")
            self.nashik_hvi = pd.read_csv(base_path / "nashik_hvi.csv")
            
            # Convert HVI columns to numeric
            for df in [self.pune_hvi, self.nashik_hvi]:
                numeric_cols = ['sensitivity', 'adaptive_capacity', 'hvi']
                for col in numeric_cols:
                    if col in df.columns:
                        df[col] = pd.to_numeric(df[col], errors='coerce')
            
            # Clean neighborhood names
            for df in [self.pune_demo, self.nashik_demo, self.pune_hvi, self.nashik_hvi]:
                df['neighborhood'] = df['neighborhood'].str.strip().str.replace(' ', '_')
            
            # Load LST metadata if available
            self.load_lst_metadata()
            
            print("All vulnerability data loaded successfully")
        except Exception as e:
            print(f"Error loading data: {e}")
            raise
    
    def load_lst_metadata(self):
        """Load LST metadata for both cities"""
        try:
            # Define paths to processed LST metadata
            base_dir = Path("F:/Urban/UHI_MIGITAGION_PLANNER-")
            
            # Load Pune LST metadata
            pune_metadata_path = base_dir / "data/processed/pune/processed/pune_lst_metadata.csv"
            if pune_metadata_path.exists():
                self.pune_lst = pune_metadata_path
                print("Pune LST metadata loaded")
            
            # Load Nashik LST metadata
            nashik_metadata_path = base_dir / "data/processed/nashik/processed/nashik_lst_metadata.csv"
            if nashik_metadata_path.exists():
                self.nashik_lst = nashik_metadata_path
                print("Nashik LST metadata loaded")
                
        except Exception as e:
            print(f"Warning: Could not load LST metadata: {e}")
            self.pune_lst = None
            self.nashik_lst = None
    
    def get_city_data(self, city_name):
        """Get demographic data for a specific city"""
        if city_name.lower() == 'pune':
            return self.pune_demo
        elif city_name.lower() == 'nashik':
            return self.nashik_demo
        else:
            raise ValueError(f"Unknown city: {city_name}")
    
    def get_city_hvi(self, city_name):
        """Get HVI data for a specific city"""
        if city_name.lower() == 'pune':
            return self.pune_hvi
        elif city_name.lower() == 'nashik':
            return self.nashik_hvi
        else:
            raise ValueError(f"Unknown city: {city_name}")
    
    def get_city_lst_metadata(self, city_name):
        """Get LST metadata file path for a specific city"""
        if city_name.lower() == 'pune':
            return self.pune_lst
        elif city_name.lower() == 'nashik':
            return self.nashik_lst
        else:
            raise ValueError(f"Unknown city: {city_name}")
    
    def get_latest_lst_file(self, city_name):
        """Get the path to the latest LST file for a city"""
        metadata_path = self.get_city_lst_metadata(city_name)
        if metadata_path is None:
            return None
        
        try:
            metadata = pd.read_csv(metadata_path)
            if metadata.empty:
                return None
            
            # Get the most recent file
            latest = metadata.iloc[-1]
            base_dir = Path("F:/Urban/UHI_MIGITAGION_PLANNER-")
            return base_dir / f"data/processed/{city_name}/processed" / Path(latest['file']).name
        except Exception as e:
            print(f"Error reading LST metadata for {city_name}: {e}")
            return None
    
    def get_combined_data(self, city_name):
        """Combine demographic, HVI, and LST data for a city"""
        demo_data = self.get_city_data(city_name)
        hvi_data = self.get_city_hvi(city_name)
        
        # Merge demographic and HVI data
        combined = pd.merge(demo_data, hvi_data, on='neighborhood', how='left')
        
        # Calculate additional vulnerability indicators with error handling
        try:
            combined['elderly_ratio'] = combined['population_over_65'] / combined['population']
        except Exception as e:
            print(f"Error calculating elderly_ratio: {e}")
            combined['elderly_ratio'] = 0
        
        try:
            combined['low_income_ratio'] = combined['low_income_households'] / combined['population']
        except Exception as e:
            print(f"Error calculating low_income_ratio: {e}")
            combined['low_income_ratio'] = 0
        
        # Integrate LST data if available
        lst_file = self.get_latest_lst_file(city_name)
        if lst_file and lst_file.exists():
            try:
                # Load LST data
                lst = xr.open_dataarray(lst_file)
                
                # City center coordinates
                if city_name.lower() == 'pune':
                    center_lat, center_lon = 18.5204, 73.8567
                else:  # Nashik
                    center_lat, center_lon = 19.9975, 73.7898
                
                # Generate coordinates for neighborhoods if not present
                if 'lat' not in combined.columns:
                    np.random.seed(42)
                    combined['lat'] = center_lat + np.random.uniform(-0.1, 0.1, len(combined))
                    combined['lon'] = center_lon + np.random.uniform(-0.1, 0.1, len(combined))
                
                # Extract LST values for each neighborhood
                lst_values = []
                for _, row in combined.iterrows():
                    try:
                        point_lst = lst.sel(x=row['lon'], y=row['lat'], method='nearest').values
                        # Fix deprecation warning by extracting scalar value
                        if isinstance(point_lst, np.ndarray):
                            point_lst = point_lst.item() if point_lst.size == 1 else np.nan
                        lst_values.append(float(point_lst))
                    except:
                        lst_values.append(np.nan)
                
                combined['lst'] = lst_values
            except Exception as e:
                print(f"Error integrating LST data for {city_name}: {e}")
                combined['lst'] = np.nan
        else:
            combined['lst'] = np.nan
        
        # Handle missing values
        combined = combined.fillna(0)
        
        return combined
    
    def create_vulnerability_map(self, city_name):
        """Create an interactive vulnerability map with LST integration"""
        data = self.get_combined_data(city_name)
        
        # City center coordinates
        if city_name.lower() == 'pune':
            center_lat, center_lon = 18.5204, 73.8567
        else:  # Nashik
            center_lat, center_lon = 19.9975, 73.7898
        
        # Create base map
        m = folium.Map(location=[center_lat, center_lon], zoom_start=11)
        
        # Determine if we have LST data for coloring
        has_lst = 'lst' in data.columns and not data['lst'].isna().all()
        
        # Add neighborhood markers
        for _, row in data.iterrows():
            # Determine marker color based on available data
            if has_lst and not pd.isna(row['lst']) and row['lst'] != 0:
                # Color based on LST temperature
                if row['lst'] >= 40:
                    color = 'red'
                    size = 15
                elif row['lst'] >= 35:
                    color = 'orange'
                    size = 12
                else:
                    color = 'green'
                    size = 10
                value_label = f"LST: {row['lst']:.1f}Â°C"
            else:
                # Fallback to HVI coloring
                if row['hvi'] >= 0.7:
                    color = 'red'
                    size = 15
                elif row['hvi'] >= 0.4:
                    color = 'orange'
                    size = 12
                else:
                    color = 'green'
                    size = 10
                value_label = f"HVI: {row['hvi']:.2f}"
            
            # Create popup content
            popup_html = f"""
            <b>{row['neighborhood'].replace('_', ' ').title()}</b><br>
            <b>{value_label}</b><br>
            <b>HVI:</b> {row['hvi']:.2f}<br>
            <b>Sensitivity:</b> {row['sensitivity']:.2f}<br>
            <b>Adaptive Capacity:</b> {row['adaptive_capacity']:.2f}<br>
            <b>Population:</b> {row['population']:,}<br>
            <b>Elderly:</b> {row['population_over_65']:,}<br>
            <b>Low Income HH:</b> {row['low_income_households']:,}<br>
            <b>AC Prevalence:</b> {row['ac_prevalence']*100:.1f}%
            """
            
            CircleMarker(
                location=[row['lat'], row['lon']],
                radius=size,
                popup=folium.Popup(popup_html, max_width=300),
                color=color,
                fill=True,
                fill_color=color,
                fill_opacity=0.7
            ).add_to(m)
        
        # Add legend
        if has_lst:
            legend_html = """
            <div style="position: fixed; 
                        bottom: 50px; left: 50px; width: 150px; height: 110px; 
                        background-color:white; border:2px solid grey; z-index:9999; 
                        font-size:14px; padding: 10px">
            <b>Temperature</b><br>
            <i class="fa fa-circle" style="color:red"></i> High (â¥40Â°C)<br>
            <i class="fa fa-circle" style="color:orange"></i> Medium (35-40Â°C)<br>
            <i class="fa fa-circle" style="color:green"></i> Low (<35Â°C)
            </div>
            """
        else:
            legend_html = """
            <div style="position: fixed; 
                        bottom: 50px; left: 50px; width: 150px; height: 90px; 
                        background-color:white; border:2px solid grey; z-index:9999; 
                        font-size:14px; padding: 10px">
            <b>Vulnerability</b><br>
            <i class="fa fa-circle" style="color:red"></i> High (HVI â¥ 0.7)<br>
            <i class="fa fa-circle" style="color:orange"></i> Medium (0.4 â¤ HVI < 0.7)<br>
            <i class="fa fa-circle" style="color:green"></i> Low (HVI < 0.4)
            </div>
            """
        m.get_root().html.add_child(folium.Element(legend_html))
        
        return m
    
    def create_vulnerability_dashboard(self, city_name):
        """Create comprehensive vulnerability analysis dashboard with LST integration"""
        data = self.get_combined_data(city_name)
        
        # Check if LST data is available
        has_lst = 'lst' in data.columns and not data['lst'].isna().all()
        
        if has_lst:
            # Create subplots with LST integration
            fig = make_subplots(
                rows=2, cols=2,
                subplot_titles=('Population vs HVI', 'Elderly Population vs HVI', 
                              'Low Income vs HVI', 'LST vs HVI'),
                specs=[[{"secondary_y": False}, {"secondary_y": False}],
                       [{"secondary_y": False}, {"secondary_y": False}]]
            )
            
            # Population vs HVI
            fig.add_trace(
                go.Scatter(
                    x=data['population'], 
                    y=data['hvi'], 
                    mode='markers',
                    text=data['neighborhood'],
                    marker=dict(
                        color=data['hvi'], 
                        colorscale='RdYlGn_r', 
                        showscale=True,
                        colorbar=dict(title="HVI")
                    ),
                    name='Population'
                ),
                row=1, col=1
            )
            
            # Elderly population vs HVI
            fig.add_trace(
                go.Scatter(
                    x=data['elderly_ratio'], 
                    y=data['hvi'], 
                    mode='markers',
                    text=data['neighborhood'],
                    marker=dict(
                        color=data['hvi'], 
                        colorscale='RdYlGn_r', 
                        showscale=True,
                        colorbar=dict(title="HVI")
                    ),
                    name='Elderly Ratio'
                ),
                row=1, col=2
            )
            
            # Low income households vs HVI
            fig.add_trace(
                go.Scatter(
                    x=data['low_income_ratio'], 
                    y=data['hvi'], 
                    mode='markers',
                    text=data['neighborhood'],
                    marker=dict(
                        color=data['hvi'], 
                        colorscale='RdYlGn_r', 
                        showscale=True,
                        colorbar=dict(title="HVI")
                    ),
                    name='Low Income Ratio'
                ),
                row=2, col=1
            )
            
            # LST vs HVI
            fig.add_trace(
                go.Scatter(
                    x=data['lst'], 
                    y=data['hvi'], 
                    mode='markers',
                    text=data['neighborhood'],
                    marker=dict(
                        color=data['lst'], 
                        colorscale='RdYlGn_r', 
                        showscale=True,
                        colorbar=dict(title="LST (Â°C)")
                    ),
                    name='LST vs HVI'
                ),
                row=2, col=2
            )
            
            # Update layout
            fig.update_layout(
                title_text=f"Vulnerability Factors Analysis - {city_name.title()}",
                showlegend=False,
                height=800
            )
            
            # Update axis labels
            fig.update_xaxes(title_text="Population", row=1, col=1)
            fig.update_xaxes(title_text="Elderly Ratio", row=1, col=2)
            fig.update_xaxes(title_text="Low Income Ratio", row=2, col=1)
            fig.update_xaxes(title_text="LST (Â°C)", row=2, col=2)
            
            fig.update_yaxes(title_text="HVI", row=1, col=1)
            fig.update_yaxes(title_text="HVI", row=1, col=2)
            fig.update_yaxes(title_text="HVI", row=2, col=1)
            fig.update_yaxes(title_text="HVI", row=2, col=2)
            
        else:
            # Original dashboard without LST
            fig = make_subplots(
                rows=2, cols=2,
                subplot_titles=('Population vs HVI', 'Elderly Population vs HVI', 
                              'Low Income vs HVI', 'AC Prevalence vs HVI'),
                specs=[[{"secondary_y": False}, {"secondary_y": False}],
                       [{"secondary_y": False}, {"secondary_y": False}]]
            )
            
            # Population vs HVI
            fig.add_trace(
                go.Scatter(
                    x=data['population'], 
                    y=data['hvi'], 
                    mode='markers',
                    text=data['neighborhood'],
                    marker=dict(
                        color=data['hvi'], 
                        colorscale='RdYlGn_r', 
                        showscale=True,
                        colorbar=dict(title="HVI")
                    ),
                    name='Population'
                ),
                row=1, col=1
            )
            
            # Elderly population vs HVI
            fig.add_trace(
                go.Scatter(
                    x=data['elderly_ratio'], 
                    y=data['hvi'], 
                    mode='markers',
                    text=data['neighborhood'],
                    marker=dict(
                        color=data['hvi'], 
                        colorscale='RdYlGn_r', 
                        showscale=True,
                        colorbar=dict(title="HVI")
                    ),
                    name='Elderly Ratio'
                ),
                row=1, col=2
            )
            
            # Low income households vs HVI
            fig.add_trace(
                go.Scatter(
                    x=data['low_income_ratio'], 
                    y=data['hvi'], 
                    mode='markers',
                    text=data['neighborhood'],
                    marker=dict(
                        color=data['hvi'], 
                        colorscale='RdYlGn_r', 
                        showscale=True,
                        colorbar=dict(title="HVI")
                    ),
                    name='Low Income Ratio'
                ),
                row=2, col=1
            )
            
            # AC prevalence vs HVI
            fig.add_trace(
                go.Scatter(
                    x=data['ac_prevalence'], 
                    y=data['hvi'], 
                    mode='markers',
                    text=data['neighborhood'],
                    marker=dict(
                        color=data['hvi'], 
                        colorscale='RdYlGn_r', 
                        showscale=True,
                        colorbar=dict(title="HVI")
                    ),
                    name='AC Prevalence'
                ),
                row=2, col=2
            )
            
            # Update layout
            fig.update_layout(
                title_text=f"Vulnerability Factors Analysis - {city_name.title()}",
                showlegend=False,
                height=800
            )
            
            # Update axis labels
            fig.update_xaxes(title_text="Population", row=1, col=1)
            fig.update_xaxes(title_text="Elderly Ratio", row=1, col=2)
            fig.update_xaxes(title_text="Low Income Ratio", row=2, col=1)
            fig.update_xaxes(title_text="AC Prevalence", row=2, col=2)
            
            fig.update_yaxes(title_text="HVI", row=1, col=1)
            fig.update_yaxes(title_text="HVI", row=1, col=2)
            fig.update_yaxes(title_text="HVI", row=2, col=1)
            fig.update_yaxes(title_text="HVI", row=2, col=2)
        
        return fig
    
    def get_vulnerability_summary(self, city_name):
        """Get vulnerability summary statistics including LST data"""
        data = self.get_combined_data(city_name)
        
        # Calculate summary statistics
        summary = {
            'total_population': data['population'].sum(),
            'avg_hvi': data['hvi'].mean(),
            'max_hvi': data['hvi'].max(),
            'high_vulnerability_count': len(data[data['hvi'] >= 0.7]),
            'medium_vulnerability_count': len(data[(data['hvi'] >= 0.4) & (data['hvi'] < 0.7)]),
            'low_vulnerability_count': len(data[data['hvi'] < 0.4]),
            'high_risk_population': data[data['hvi'] >= 0.7]['population'].sum(),
            'avg_elderly_ratio': data['elderly_ratio'].mean(),
            'avg_low_income_ratio': data['low_income_ratio'].mean(),
            'avg_ac_prevalence': data['ac_prevalence'].mean()
        }
        
        # Add LST statistics if available
        if 'lst' in data.columns and not data['lst'].isna().all():
            lst_data = data[data['lst'] != 0]['lst']  # Exclude NaN and zero values
            if len(lst_data) > 0:
                summary.update({
                    'avg_lst': lst_data.mean(),
                    'max_lst': lst_data.max(),
                    'min_lst': lst_data.min(),
                    'high_temp_count': len(lst_data[lst_data >= 40]),
                    'medium_temp_count': len(lst_data[(lst_data >= 35) & (lst_data < 40)]),
                    'low_temp_count': len(lst_data[lst_data < 35])
                })
        
        return summary
    
    def get_most_vulnerable_neighborhoods(self, city_name, top_n=5):
        """Get the most vulnerable neighborhoods including LST data"""
        data = self.get_combined_data(city_name)
        return data.nlargest(top_n, 'hvi')
    
    def get_city_comparison(self):
        """Generate comparison metrics between Pune and Nashik including LST data"""
        pune_summary = self.get_vulnerability_summary('pune')
        nashik_summary = self.get_vulnerability_summary('nashik')
        
        # Base comparison metrics
        comparison = {
            'metric': [
                'Average HVI',
                'Maximum HVI',
                'High Vulnerability Neighborhoods',
                'High Risk Population',
                'Average Elderly Ratio',
                'Average Low Income Ratio',
                'Average AC Prevalence'
            ],
            'pune': [
                pune_summary['avg_hvi'],
                pune_summary['max_hvi'],
                pune_summary['high_vulnerability_count'],
                pune_summary['high_risk_population'],
                pune_summary['avg_elderly_ratio'],
                pune_summary['avg_low_income_ratio'],
                pune_summary['avg_ac_prevalence']
            ],
            'nashik': [
                nashik_summary['avg_hvi'],
                nashik_summary['max_hvi'],
                nashik_summary['high_vulnerability_count'],
                nashik_summary['high_risk_population'],
                nashik_summary['avg_elderly_ratio'],
                nashik_summary['avg_low_income_ratio'],
                nashik_summary['avg_ac_prevalence']
            ]
        }
        
        # Add LST comparison metrics if available for both cities
        if 'avg_lst' in pune_summary and 'avg_lst' in nashik_summary:
            lst_metrics = [
                'Average LST (Â°C)',
                'Maximum LST (Â°C)',
                'High Temperature Areas'
            ]
            comparison['metric'].extend(lst_metrics)
            comparison['pune'].extend([
                pune_summary['avg_lst'],
                pune_summary['max_lst'],
                pune_summary['high_temp_count']
            ])
            comparison['nashik'].extend([
                nashik_summary['avg_lst'],
                nashik_summary['max_lst'],
                nashik_summary['high_temp_count']
            ])
        
        return pd.DataFrame(comparison)

# Test execution
if __name__ == "__main__":
    print("Testing Vulnerability Analyzer...")
    try:
        analyzer = VulnerabilityAnalyzer()
        print("Vulnerability Analyzer initialized successfully")
        
        # Test Pune data
        pune_data = analyzer.get_combined_data('pune')
        print(f"Pune data loaded: {len(pune_data)} neighborhoods")
        
        # Test Nashik data
        nashik_data = analyzer.get_combined_data('nashik')
        print(f"Nashik data loaded: {len(nashik_data)} neighborhoods")
        
        # Test summary
        pune_summary = analyzer.get_vulnerability_summary('pune')
        print(f"Pune summary: Avg HVI = {pune_summary['avg_hvi']:.2f}")
        
        nashik_summary = analyzer.get_vulnerability_summary('nashik')
        print(f"Nashik summary: Avg HVI = {nashik_summary['avg_hvi']:.2f}")
        
        # Test comparison
        comparison = analyzer.get_city_comparison()
        print(f"City comparison generated: {len(comparison)} metrics")
        
        print("\nAll tests passed!")
        
    except Exception as e:
        print(f"Error: {e}")
        import traceback
        traceback.print_exc()